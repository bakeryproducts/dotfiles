if empty(glob('~/.config/vim/autoload/plug.vim'))
       silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
         \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
       autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
"set nocompatible
syntax enable
let mapleader = ' '

set number relativenumber
set noswapfile
set scrolloff=5
set backspace=indent,eol,start
set foldmethod=expr foldexpr=getline(v\:lnum)=~\'\\#\\s\\#\\s\'?\'>1\'\:\'=\' foldlevel=0
set clipboard=unnamedplus
set nohlsearch
set nowrap
set signcolumn=yes

" Pythonic stuff
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set autoindent
set fileformat=unix

set hidden
set wildmenu
set hlsearch
set ignorecase
set smartcase
"set laststatus=2
"
set undofile                " Save undos after file closes
set undodir=/tmp" where to save undo histories
"set mouse=a
set cmdheight=2
map Y y$
set ttimeoutlen=50
set updatetime=500

call plug#begin('~/.config/vim/plugged')
"Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox' 
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-commentary'
Plug 'neovim/nvim-lspconfig'
Plug 'folke/lsp-colors.nvim'
Plug 'nvim-lua/completion-nvim'
Plug 'nvim-lua/diagnostic-nvim'
Plug 'sbdchd/neoformat'
call plug#end()

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  -- buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  -- buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  -- buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  -- buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  -- buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  -- buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  -- buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  -- buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  -- buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'pylsp' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF


"lua require('lspconfig').pylsp.setup{ on_attach=require'completion'.on_attach}
let asyncomplete_auto_completeopt = 0
set completeopt=menuone,noinsert,noselect

let g:EasyMotion_smartcase = 1
"let g:jedi#show_call_signatures = 1
"let g:jupyter_mapkeys = 0
let g:gitgutter_close_preview_on_escape=1
let g:airline_theme='gruvbox'
autocmd FileType python setlocal completeopt-=preview

colorscheme gruvbox
let g:gruvbox_transparent_bg = 1
set background=dark
highlight Normal     ctermbg=NONE guibg=NONE
highlight LineNr     ctermbg=NONE guibg=NONE
highlight SignColumn ctermbg=NONE guibg=NONE

" unmapping
" cant find a way for plugin maps, remap for now
map <leader>gsh <Plug>(GitGutterStageHunk)
map <leader>gsu <Plug>(GitGutterUndoHunk)
map <leader>gsp <Plug>(GitGutterPreviewHunk)
"
"

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"


map <leader>glf :Neoformat<CR>


nnoremap ; :
nnoremap : ;
nnoremap <leader>wh :wincmd h<CR>
nnoremap <leader>wj :wincmd j<CR>
nnoremap <leader>wk :wincmd k<CR>
nnoremap <leader>wl :wincmd l<CR>
nnoremap <leader>l :bp<CR>
nnoremap <leader>h :bn<CR>
nnoremap <leader>bw :bw<CR>
nnoremap <leader>p :buffers<CR>:buffer<Space>
nnoremap <leader>cc :ccl<CR>

nnoremap <C-p> :Files<CR>
nnoremap <leader>z :noh<CR>
nnoremap <leader>re :so ~/.config/vim/vimrc<CR>
nnoremap <leader>rr :edit!<CR>
nnoremap <leader>rg :Rg   

" -------------End

" ezmove
map  <Leader>ww <Plug>(easymotion-bd-w)
nmap <Leader>ww <Plug>(easymotion-overwin-w)
nmap <leader>f <Plug>(easymotion-s2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

noremap  M "0p
autocmd InsertEnter,InsertLeave * set cul!

nnoremap cn *``cgn
nnoremap cN *``cgN
inoremap <C-j> <Down>
inoremap <C-k> <Up>




