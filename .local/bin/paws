#!/usr/bin/env python3

import os
import yaml
from dataclasses import dataclass
from loguru import logger
from pathlib import Path
from subprocess import check_output

import fire


TEMP='/tmp/_aws_tmp.yaml'
ENV_PATH=Path.home() / '.config/zsh/.paws'

DEF_IID = '$PAWS_1_IID'
ALL_IID = {}
for i in range(9):
    iid = f'PAWS_{i}_IID'
    if os.environ.get(iid, False):
        ALL_IID[i] = '$' + iid


@dataclass
class AwsInstance:
    InstanceId: str
    PublicIpAddress: str
    PublicDnsName: str
    InstanceType: str
    State: str


def get_status():
    r = check_output('aws ec2 describe-instances', shell=True)
    return r


def parse_status(data):
    try:
        data = yaml.safe_load(data)
    except yaml.YAMLError as exc:
        print(exc)
        data = None
    return data


def get_info(data):
    instances = []
    for r in data:
        v = r['Instances']
        assert len(v) == 1
        v = v[0]
        iid = v['InstanceId']

        pub_ip = v.get('PublicIpAddress', None)
        pub_name = v.get('PublicDnsName', None)
        inst_type = v.get('InstanceType', None)
        state = v.get('State',{}).get('Name', None)
        #KeyName, LaunchTime

        if pub_name == '':
            pub_name = None

        ai = AwsInstance(InstanceId=iid,
                         InstanceType=inst_type,
                         PublicIpAddress=pub_ip,
                         PublicDnsName=pub_name,
                         State=state,
                        )
        instances.append(ai)

    return instances


def set_env(inst, idx, path=None):
    s = f"export PAWS_{idx}_NAME={str(inst.PublicDnsName)}\n"
    s+= f"export PAWS_{idx}_IP={str(inst.PublicIpAddress)}\n"

    if path is not None:
        with open(path, 'w') as f:
            f.write(s)
    return s


def test(show=False):
    print(show)


def start(iid=DEF_IID, dry=False):
    cmd = f'aws ec2 start-instances --instance-ids {iid}'
    if dry:
        cmd += ' --dry-run'
    logger.debug(cmd)
    r = check_output(cmd, shell=True)
    logger.info(r)


def stop(iid=DEF_IID, force=False):
    cmd = f'aws ec2 stop-instances --instance-ids {iid}'
    if not force:
        cmd += ' --dry-run'
    logger.debug(cmd)
    r = check_output(cmd, shell=True)
    logger.info(r)


def generate_alias(idx):
    alias = f"alias pw{idx}='ssh -i ~/.ssh/paws_{idx}.pem $PAWS_{idx}_USER@$PAWS_{idx}_NAME'\n"
    return alias


def set():
    logger.debug(f'setting valid from IIDS: {ALL_IID}')
    instances = check(get_vals=True)
    env = ''
    for inst in instances:
        for idx, _iid in ALL_IID.items():
            iid = os.environ.get(_iid[1:]) # strip $
            print(inst.InstanceId, iid)
            if inst.InstanceId == iid:
                env += set_env(inst, idx)
                env += generate_alias(idx)

    with open(ENV_PATH, 'w') as f:
        f.write(env)
    print(env)
    logger.debug(env)



def set_iid(iid=DEF_IID, idx=1):
    logger.debug(iid)
    instances = check(get_vals=True)

    inst = [i for i in instances if i.InstanceId == iid]
    inst = inst[0] if inst else None

    if inst is not None:
        set_env(inst, idx, path=ENV_PATH)
        logger.info(inst)
    else:
        logger.error(f'No instance {iid}!')
    return


def check(get_vals=False):
    rawdata = get_status()
    yamldata = parse_status(rawdata)['Reservations']
    instances = get_info(yamldata)
    [logger.debug(i) for i in instances]

    if get_vals:
        return instances


def switch(itype, iid=DEF_IID, dry=False):
    """
        itype:
        https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
        t2.micro, t3.micro, g4dn.xlarge
    """
    defaults = dict(cpu='t2.micro',
                    gpu='g4dn.xlarge')
    itype = defaults.get(itype, itype)

    cmd = f'aws ec2 modify-instance-attribute --instance-id {iid} --instance-type {itype}'
    if dry: cmd += ' --dry-run'
    logger.debug(cmd)
    r = check_output(cmd, shell=True)
    logger.info(r)



if __name__ == '__main__':
    fire.Fire()
