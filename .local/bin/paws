#!/usr/bin/env python3

import os
import yaml
from dataclasses import dataclass
from loguru import logger
from pathlib import Path
from subprocess import check_output

import fire


@dataclass
class AwsInstance:
    InstanceId: str
    PublicIpAddress: str
    PublicDnsName: str
    InstanceType: str
    State: str


@dataclass
class Cfg:
    iid=os.environ.get('PAWS_IID', None)
    temp='/tmp/_aws_tmp.yaml'
    env_path=Path.home() / '.config/zsh/.paws'

def get_status():
    r = check_output('aws ec2 describe-instances', shell=True)
    return r

def parse_status(data):
    try:
        data = yaml.safe_load(data)
    except yaml.YAMLError as exc:
        print(exc)
        data = None
    return data


def get_info(data):
    instances = []
    for r in data:
        v = r['Instances']
        assert len(v) == 1
        v = v[0]
        iid = v['InstanceId']

        pub_ip = v.get('PublicIpAddress', None)
        pub_name = v.get('PublicDnsName', None)
        inst_type = v.get('InstanceType', None)
        state = v.get('State',{}).get('Name', None)
        #KeyName, LaunchTime
        
        ai = AwsInstance(InstanceId=iid,
                         InstanceType=inst_type,
                         PublicIpAddress=pub_ip,
                         PublicDnsName=pub_name,
                         State=state,
                        )
        instances.append(ai)
    
    return instances


def set_env(path, inst, idx=1):
    s = f"""
    export PAWS_{idx}_NAME={str(inst.PublicDnsName)}
    export PAWS_{idx}_IP={str(inst.PublicIpAddress)}
    """
    with open(path, 'w') as f:
        f.write(s)


def test(show=False):
    print(show)


def start(iid=None, dry=False):
    if iid is None:
        iid = '$PAWS_IID'
    cmd = f'aws ec2 start-instances --instance-ids {iid}'
    if dry:
        cmd += ' --dry-run'
    logger.debug(cmd)
    r = check_output(cmd, shell=True)
    logger.info(r)


def stop(iid=None, force=False):
    if iid is None:
        iid = '$PAWS_IID'
    cmd = f'aws ec2 stop-instances --instance-ids {iid}'
    if not force:
        cmd += ' --dry-run'
    logger.debug(cmd)
    r = check_output(cmd, shell=True)
    logger.info(r)


def set(iid=None):
    c = Cfg()
    if iid is not None: c.iid = iid
    logger.debug(c.iid)
    instances = check(get_vals=True)

    inst = [i for i in instances if i.InstanceId == c.iid]
    inst = inst[0] if inst else None

    if inst is not None:
        set_env(c.env_path, inst)
        logger.info(inst)
    else:
        logger.error(f'No instance {c.iid}!')
    return


def check(get_vals=False):
    rawdata = get_status()
    yamldata = parse_status(rawdata)['Reservations']
    instances = get_info(yamldata)
    [logger.debug(i) for i in instances]

    if get_vals:
        return instances


def switch(itype, iid=None, dry=False):
    """
        itype:
        https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
        t2.micro, t3.micro, g4dn.xlarge
    """
    defaults = dict(cpu='t2.micro',
                    gpu='g4dn.xlarge')
    itype = defaults.get(itype, itype)

    if iid is None: iid = '$PAWS_IID'
    cmd = f'aws ec2 modify-instance-attribute --instance-id {iid} --instance-type {itype}'
    if dry: cmd += ' --dry-run'
    logger.debug(cmd)
    r = check_output(cmd, shell=True)
    logger.info(r)



if __name__ == '__main__':
    fire.Fire()
